name: Sydney Markets B2B CI/CD Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: sydney-markets/b2b-app
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  # Code Quality and Security Scanning
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [php-cs-fixer, phpstan, security-checker, eslint, stylelint]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, json, fileinfo, tokenizer, openssl, pdo, bcmath, gd, zip
          coverage: xdebug

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('composer.lock') }}
          restore-keys: composer-${{ runner.os }}-

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader --no-interaction

      - name: Install NPM dependencies
        run: npm ci

      # PHP Code Style Fixer
      - name: PHP CS Fixer
        if: matrix.check == 'php-cs-fixer'
        run: vendor/bin/php-cs-fixer fix --dry-run --diff --verbose

      # PHPStan Static Analysis
      - name: PHPStan
        if: matrix.check == 'phpstan'
        run: vendor/bin/phpstan analyse --memory-limit=2G

      # PHP Security Checker
      - name: Security Checker
        if: matrix.check == 'security-checker'
        run: composer audit

      # ESLint for JavaScript
      - name: ESLint
        if: matrix.check == 'eslint'
        run: npm run lint:js

      # Stylelint for CSS
      - name: Stylelint
        if: matrix.check == 'stylelint'
        run: npm run lint:css

  # Vulnerability Scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'https://sydney-markets-staging.com'

  # Testing
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_test
          MYSQL_DATABASE: sydney_markets_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, json, fileinfo, tokenizer, openssl, pdo_mysql, bcmath, gd, zip, redis
          coverage: xdebug

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ~/.composer/cache/files
          key: composer-${{ runner.os }}-${{ hashFiles('composer.lock') }}

      - name: Install dependencies
        run: |
          composer install --no-progress --prefer-dist --optimize-autoloader
          npm ci

      - name: Prepare Laravel application
        run: |
          cp .env.testing .env
          php artisan key:generate
          php artisan config:cache
          php artisan migrate --force
          php artisan db:seed --force

      - name: Build frontend assets
        run: npm run build

      - name: Run PHP Unit Tests
        run: vendor/bin/phpunit --coverage-clover=coverage.xml --coverage-html=coverage-html

      - name: Run Laravel Feature Tests
        run: php artisan test --parallel

      - name: Run JavaScript Tests
        run: npm test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: php
          name: php-coverage
          fail_ci_if_error: false

  # Build and Push Docker Images
  build-images:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ github.sha }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

  # Deploy to Development
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: development
      url: https://dev.sydney-markets.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to development server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USERNAME }}
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd /var/www/sydney-markets-dev
            docker-compose pull
            docker-compose down
            docker-compose up -d
            docker-compose exec -T app php artisan migrate --force
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache
            docker-compose exec -T app php artisan queue:restart

      - name: Health check
        run: |
          sleep 30
          curl -f https://dev.sydney-markets.com/health || exit 1

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/staging'
    environment:
      name: staging
      url: https://staging.sydney-markets.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /var/www/sydney-markets-staging
            docker-compose pull
            docker-compose down
            docker-compose up -d
            docker-compose exec -T app php artisan migrate --force
            docker-compose exec -T app php artisan config:cache
            docker-compose exec -T app php artisan route:cache
            docker-compose exec -T app php artisan view:cache
            docker-compose exec -T app php artisan queue:restart

      - name: Run smoke tests
        run: |
          sleep 30
          curl -f https://staging.sydney-markets.com/health || exit 1
          # Add more comprehensive smoke tests here

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://sydney-markets.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: ${{ github.token }}
          environment: production

      - name: Blue-Green Deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /var/www/sydney-markets-prod
            
            # Create backup
            ./scripts/create-backup.sh
            
            # Blue-Green deployment
            docker-compose -f docker-compose.blue.yml pull
            docker-compose -f docker-compose.blue.yml up -d
            
            # Run migrations on blue environment
            docker-compose -f docker-compose.blue.yml exec -T app php artisan migrate --force
            docker-compose -f docker-compose.blue.yml exec -T app php artisan config:cache
            docker-compose -f docker-compose.blue.yml exec -T app php artisan route:cache
            docker-compose -f docker-compose.blue.yml exec -T app php artisan view:cache
            
            # Health check on blue environment
            sleep 30
            if curl -f http://blue.sydney-markets.internal/health; then
              # Switch traffic to blue
              ./scripts/switch-to-blue.sh
              # Stop green environment
              docker-compose -f docker-compose.green.yml down
              echo "Deployment successful"
            else
              echo "Health check failed, rolling back"
              docker-compose -f docker-compose.blue.yml down
              exit 1
            fi

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          state: success
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          state: failure
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /var/www/sydney-markets-prod
            ./scripts/rollback.sh

  # Notification
  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify Slack on success
        if: needs.deploy-production.result == 'success'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: 'Deployment to production successful! 🎉'
          SLACK_COLOR: ${{ job.status }}

      - name: Notify Slack on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: 'Deployment failed! Please check the logs. 🚨'
          SLACK_COLOR: danger